{
    "$return_value": {
        "log_settings": {
            "transcription_service": "elevenlabs",
            "ai_service": "none",
            "hasOpenAI": false,
            "hasAnthropic": false,
            "hasDeepgram": false,
            "hasGoogle": false,
            "hasGroq": false,
            "hasElevenLabs": true,
            "transcription_model": "scribe_v1",
            "advanced_options": false
        },
        "cloud_app": "Google Drive",
        "file_name": "output3.mp3",
        "path": "/tmp/output3.mp3",
        "mime": ".mp3",
        "link": "https://drive.google.com/file/d/14b0lGsieLvq0DBTUasZlOczn7y9lb0l3/view?usp=drivesdk",
        "duration": 490,
        "duration_formatted": "0:08:10",
        "transcript_chunks": [
            {
                "text": "Welcome to the Notion Formula Boot Camp. We are gonna kick things immediately into high gear and create two useful Notion formulas in this lesson, and every lesson in this course has both a written version and a video version, so you can pick whichever you like. This audio narration is provided to pace you through the written version, in case that's helpful to you, but you don't have to use it. Now, you're gonna find a more traditional course intro in the next section, but I wanted to start things out here with, uh, giving you a quick win. Now, quick wins are crucial to long-term successful learning, in my opinion. By getting your hands really dirty and experiencing quick wins, you'll gain motivation and confidence to keep pushing you deeper into the learning curve. So, let's get started. Here's a page from my Notion Pokedex, and this entry is for Articuno, which happens to be my favorite Pokemon. And it's mostly complete, but there's just one problem. What's up with these height and weight values, hmm? A height of 17? A weight of 554? Pretty sure a bird does not weigh that much. So what's going on here? Well, these height and weight values were pulled from PokeAPI, a resource that has data on every Pokemon in existence, and the data in PokeAPI is exactly the same as the data in the official Pokemon games. But for technical reasons, the Pokemon developers decided to store height values in decimeters and weight values in hectograms. And if you're US-based like me and you don't readily know what these terms mean, they're lesser-known units in the metric system. Deci means 1/10, while hecto means 100. So, a decimeter is 1/10 of a meter, and a hectogram is 100 grams or 1/10 of a kilogram. So, to make these values more readable, let's create two Notion formulas, one to convert decimeters to meters, and one to convert hectograms into kilograms. Let's go ahead and build the first one. Height, decimeters to meters. Now, I've created a template version of my Pokedex that you can access and duplicate into your own workspace. Click that link, duplicate the template into your workspace, and then navigate to the Articuno page. Next, create a new property with the formula property type and call it Height parentheses M parentheses. If you need a refresher on creating database properties, by the way, you can find one in my Notion database guide. In the formula editor, enter the following formula. And here's the formula in vocal form. FORMAT, parentheses, PROP, parentheses, HEIGHT, parentheses, divided by 10, parentheses, plus M. Like magic, you're gonna see this formula return Articuno's height in meters, 1.7 meters. Congrats, you've just written your first Notion formula. Your copy of the Pokedex template also contains an entry for Charmander, so go look at that really quick and you're gonna see that your formula is performing the correct calculation for Charmander as well. This is the beauty of the way that formulas and database properties interact. Across your database, the HEIGHTM property is written the same. However, because your formula pulls information from other properties, in this case, HEIGHT, the return value can be different for each database row. By the way, you've also just used six Notion formula principles, all in a single one-line formula, the FORMAT function, type conversion, a property reference, the division operator, a hardcoded number, and string concatenation. Now, don't worry if you don't know what any of these terms mean just yet. I'm gonna explain them all in a minute. And by the end of this course, you're gonna be very comfortable with all of them. For now, let's put your brain to work. I gave you the formula for height in meters. Now it's your turn to build a similar formula for weight in kilograms. Challenge, create a weight kilograms formula. Using what you've learned, create the formula for weight in kilograms. If you create it correctly, you should see a value of 55.4 kilograms for Articuno. Now challenge yourself to write this formula from scratch. I will give you two small hints to get started. First, the formula will be extremely similar to the one we just built for height in meters. And second, think about the unit conversion that we're trying to do. A hectogram is 100 grams, while a kilogram, our target unit, is 1,000 grams. Now, if you really need the answer, you can find it in the course answers page. But for the sake of your learning progress, I would urge you not to look at that answer until you've at least followed the 15-minute rule, which I have linked in this lesson. The best piece of advice I can give you for both completing this course and learning anything is to embrace the learning curve. View yourself as the kind of person who runs headfirst and bursts through the brick wall when it confronts you. Breaking down the formula. As I mentioned earlier, you just used six different formula principles while creating these two formulas. These principles, among others, will be crucial to your foundational understanding of Notion formulas. And fun fact, they will also help you learn to code better if you choose to do that someday down the road. They certainly helped me understand JavaScript a lot more quickly. Now let's break down our height in meters formula and go through each of these principles super quickly. For each, I'm gonna link to the relevant section in my Notion formula reference in case you wanna dig deeper. And you're gonna see me link to this formula reference a lot throughout this course. This is akin to the way that any JavaScript course worth its salt would at least tell you to go look at the MDN web docs. They are the definitive reference for the language. And these links are present for thoroughness, as I am a detail-oriented nerd, but if you are intimidated by them, feel free to skip them for now. We are gonna cover everything important throughout this course, and we're gonna do it in an action-oriented manner. Now, first, here's a plain English summary of what this formula is actually doing. First, this formula is gonna get the value of the HEIGHT property. Now, HEIGHT is a number type property, and in Articuno's case, the value is 17. It then divides this value by 10, returning a numeric value of 1.7. And I'll note that 10 is a hardcoded value in the formula, so it will always be 10 across all rows in the database. By contrast, our PROP HEIGHT function will be whatever the height value of each row is. The FORMAT function then converts this numeric value into a string value, and strings are essentially just pieces of text. Finally, the plus or addition operator is used to concatenate, i.e. combine, the string value with another string, in this case, space and then M. And the final return value of this entire formula is 1.7 M, or meters. Now, let's see how each of the six formula pieces I mentioned above come into play here.First, the format function. This is a function that accepts data of any type as its argument and converts that data to a string. Type conversion. Notion formulas can work with strings, numbers, dates, and Boolean values, or true or false values. However, they can only return data of a single type. Therefore, you'll often have to convert data types when writing your formulas. Property reference. Using the prop function, we can bring in the value of any other property in the same database. Division operator. This just divides a number by another number. You can also use the divide function, but the slash character is just so much more convenient. Hard-coded number. Hard-coded is my term for data that you write directly into a formula. The opposite of hard-coded data would be a property reference. String concatenation. This basically means combining two strings together. For example, Monkey D as one string and Luffy as another string would return Monkey D. Luffy if you concatenated them together. Now, you can also use the concat function for this, but again, the plus operator is just so much more easy to use, and it's much more flexible as well. All right, let's move on. Don't worry if some of what we covered here feels confusing. The entire point of this lesson is to, number one, give you a quick win in order to motivate you to push forward, but number two, give you some early exposure to several concepts that will be important later on. Remember those video games that gave your character, like, all their abilities and weapons and gear in the first level, only to then take it all away before you go onto the next one? This is a classic trick in game design. It gives you a taste of what's to come, and it also makes each new ability and upgrade feel somewhat familiar when you finally unlock it later in the game. And that small amount of familiarity can help you to build mastery much faster. So, now that we've finished this initial challenge, let's move on to the proper course introduction.",
                "additional_formats": [
                    {
                        "requested_format": "srt",
                        "file_extension": "srt",
                        "content_type": "text/srt",
                        "is_base64_encoded": false,
                        "content": "1\n00:00:00,319 --> 00:00:02,079\nWelcome to the Notion Formula Boot Camp.\n\n2\n00:00:02,220 --> 00:00:07,059\nWe are gonna kick things immediately into high\ngear and create two useful Notion formulas in this\n\n3\n00:00:07,099 --> 00:00:11,859\nlesson, and every lesson in this course has both a\nwritten version and a video version, so you can\npick\n\n4\n00:00:11,859 --> 00:00:16,739\nwhichever you like. This audio narration is\nprovided to pace you through the written\n\n5\n00:00:16,779 --> 00:00:20,100\nversion, in case that's helpful to you, but you\ndon't have to use it.\n\n6\n00:00:20,500 --> 00:00:24,659\nNow, you're gonna find a more traditional course\nintro in the next section, but I wanted to start\nthings out\n\n7\n00:00:24,699 --> 00:00:26,879\nhere with, uh, giving you a quick win.\n\n8\n00:00:27,119 --> 00:00:31,379\nNow, quick wins are crucial to long-term\nsuccessful learning, in my opinion.\n\n9\n00:00:31,599 --> 00:00:36,040\nBy getting your hands really dirty and\nexperiencing quick wins, you'll gain motivation\nand\n\n10\n00:00:36,099 --> 00:00:40,800\nconfidence to keep pushing you deeper into the\nlearning curve. So, let's get started.\n\n11\n00:00:41,079 --> 00:00:45,879\nHere's a page from my Notion Pokedex, and this\nentry is for Articuno, which happens to be my\nfavorite\n\n12\n00:00:45,879 --> 00:00:48,579\nPokemon. And it's mostly complete,\n\n13\n00:00:49,279 --> 00:00:52,619\nbut there's just one problem. What's up with these\nheight and weight values, hmm?\n\n14\n00:00:53,039 --> 00:00:57,919\nA height of 17? A weight of 554? Pretty sure a\nbird does\n\n15\n00:00:58,000 --> 00:00:59,840\nnot weigh that much. So what's going on here?\n\n16\n00:00:59,840 --> 00:01:04,439\nWell, these height and weight values were pulled\nfrom PokeAPI, a resource that has data on\n\n17\n00:01:04,519 --> 00:01:09,380\nevery Pokemon in existence, and the data in\nPokeAPI is exactly the same as the data in the\n\n18\n00:01:09,399 --> 00:01:13,880\nofficial Pokemon games. But for technical reasons,\nthe Pokemon developers decided to store height\n\n19\n00:01:13,939 --> 00:01:17,539\nvalues in decimeters and weight values in\nhectograms.\n\n20\n00:01:17,779 --> 00:01:22,039\nAnd if you're US-based like me and you don't\nreadily know what these terms mean, they're\nlesser-known\n\n21\n00:01:22,099 --> 00:01:26,439\nunits in the metric system. Deci means 1/10, while\nhecto means\n\n22\n00:01:26,579 --> 00:01:31,199\n100. So, a decimeter is 1/10 of a meter, and a\nhectogram is\n\n23\n00:01:31,239 --> 00:01:36,139\n100 grams or 1/10 of a kilogram. So, to make these\nvalues more readable, let's\n\n24\n00:01:36,179 --> 00:01:40,959\ncreate two Notion formulas, one to convert\ndecimeters to meters, and one to\n\n25\n00:01:40,979 --> 00:01:44,420\nconvert hectograms into kilograms. Let's go ahead\nand build the first one.\n\n26\n00:01:45,060 --> 00:01:49,699\nHeight, decimeters to meters. Now, I've created a\ntemplate version of my Pokedex that you can\n\n27\n00:01:49,699 --> 00:01:51,999\naccess and duplicate into your own workspace.\n\n28\n00:01:52,339 --> 00:01:57,079\nClick that link, duplicate the template into your\nworkspace, and then navigate to the Articuno page.\n\n29\n00:01:57,799 --> 00:02:02,419\nNext, create a new property with the formula\nproperty type and call it Height parentheses M\n\n30\n00:02:02,419 --> 00:02:06,700\nparentheses. If you need a refresher on creating\ndatabase properties, by the way, you can find one\nin my\n\n31\n00:02:06,779 --> 00:02:10,999\nNotion database guide. In the formula editor,\nenter the following formula.\n\n32\n00:02:11,019 --> 00:02:13,279\nAnd here's the formula in vocal form.\n\n33\n00:02:13,599 --> 00:02:18,539\nFORMAT, parentheses, PROP, parentheses, HEIGHT,\nparentheses, divided by\n\n34\n00:02:18,679 --> 00:02:21,139\n10, parentheses, plus M.\n\n35\n00:02:21,799 --> 00:02:26,539\nLike magic, you're gonna see this formula return\nArticuno's height in meters, 1.7 meters.\n\n36\n00:02:26,819 --> 00:02:29,619\nCongrats, you've just written your first Notion\nformula.\n\n37\n00:02:30,000 --> 00:02:34,760\nYour copy of the Pokedex template also contains an\nentry for Charmander, so go look at that really\nquick and\n\n38\n00:02:34,760 --> 00:02:39,180\nyou're gonna see that your formula is performing\nthe correct calculation for Charmander as well.\n\n39\n00:02:39,619 --> 00:02:43,659\nThis is the beauty of the way that formulas and\ndatabase properties interact.\n\n40\n00:02:44,359 --> 00:02:47,959\nAcross your database, the HEIGHTM property is\nwritten the same.\n\n41\n00:02:48,059 --> 00:02:52,919\nHowever, because your formula pulls information\nfrom other properties, in this case, HEIGHT,\n\n42\n00:02:53,179 --> 00:02:56,579\nthe return value can be different for each\ndatabase row.\n\n43\n00:02:56,939 --> 00:03:01,639\nBy the way, you've also just used six Notion\nformula principles, all in a single\n\n44\n00:03:01,939 --> 00:03:06,619\none-line formula, the FORMAT function, type\nconversion, a property\n\n45\n00:03:06,679 --> 00:03:11,319\nreference, the division operator, a hardcoded\nnumber, and string\n\n46\n00:03:11,379 --> 00:03:16,059\nconcatenation. Now, don't worry if you don't know\nwhat any of these terms mean just yet.\n\n47\n00:03:16,079 --> 00:03:17,599\nI'm gonna explain them all in a minute.\n\n48\n00:03:17,699 --> 00:03:21,279\nAnd by the end of this course, you're gonna be\nvery comfortable with all of them.\n\n49\n00:03:21,699 --> 00:03:26,279\nFor now, let's put your brain to work. I gave you\nthe formula for height in meters.\n\n50\n00:03:26,679 --> 00:03:30,339\nNow it's your turn to build a similar formula for\nweight in kilograms.\n\n51\n00:03:31,219 --> 00:03:34,039\nChallenge, create a weight kilograms formula.\n\n52\n00:03:34,659 --> 00:03:37,659\nUsing what you've learned, create the formula for\nweight in kilograms.\n\n53\n00:03:37,819 --> 00:03:42,639\nIf you create it correctly, you should see a value\nof 55.4 kilograms for Articuno.\n\n54\n00:03:43,039 --> 00:03:45,819\nNow challenge yourself to write this formula from\nscratch.\n\n55\n00:03:45,939 --> 00:03:48,099\nI will give you two small hints to get started.\n\n56\n00:03:48,459 --> 00:03:53,179\nFirst, the formula will be extremely similar to\nthe one we just built for height in meters.\n\n57\n00:03:53,539 --> 00:03:57,219\nAnd second, think about the unit conversion that\nwe're trying to do.\n\n58\n00:03:57,639 --> 00:04:02,299\nA hectogram is 100 grams, while a kilogram, our\ntarget\n\n59\n00:04:02,359 --> 00:04:07,219\nunit, is 1,000 grams. Now, if you really need the\nanswer, you can find it in the\n\n60\n00:04:07,339 --> 00:04:12,059\ncourse answers page. But for the sake of your\nlearning progress, I would urge you not to look at\nthat\n\n61\n00:04:12,119 --> 00:04:16,779\nanswer until you've at least followed the\n15-minute rule, which I have linked in this\n\n62\n00:04:16,859 --> 00:04:21,819\nlesson. The best piece of advice I can give you\nfor both completing this course and learning\nanything\n\n63\n00:04:21,999 --> 00:04:26,559\nis to embrace the learning curve. View yourself as\nthe kind of person who runs\n\n64\n00:04:26,679 --> 00:04:31,539\nheadfirst and bursts through the brick wall when\nit confronts you. Breaking down the formula.\n\n65\n00:04:31,939 --> 00:04:36,359\nAs I mentioned earlier, you just used six\ndifferent formula principles while creating these\ntwo\n\n66\n00:04:36,379 --> 00:04:40,799\nformulas. These principles, among others, will be\ncrucial to your foundational\n\n67\n00:04:40,819 --> 00:04:45,499\nunderstanding of Notion formulas. And fun fact,\nthey will also help you learn to code\n\n68\n00:04:45,519 --> 00:04:47,939\nbetter if you choose to do that someday down the\nroad.\n\n69\n00:04:48,019 --> 00:04:51,339\nThey certainly helped me understand JavaScript a\nlot more quickly.\n\n70\n00:04:51,679 --> 00:04:56,099\nNow let's break down our height in meters formula\nand go through each of these principles super\nquickly.\n\n71\n00:04:56,419 --> 00:05:00,579\nFor each, I'm gonna link to the relevant section\nin my Notion formula reference in case you wanna\ndig\n\n72\n00:05:00,579 --> 00:05:04,459\ndeeper. And you're gonna see me link to this\nformula reference a lot throughout this course.\n\n73\n00:05:04,719 --> 00:05:09,099\nThis is akin to the way that any JavaScript course\nworth its salt would at least tell you to go\n\n74\n00:05:09,259 --> 00:05:13,959\nlook at the MDN web docs. They are the definitive\nreference for the language.\n\n75\n00:05:14,199 --> 00:05:19,119\nAnd these links are present for thoroughness, as I\nam a detail-oriented nerd, but if you are\n\n76\n00:05:19,119 --> 00:05:21,859\nintimidated by them, feel free to skip them for\nnow.\n\n77\n00:05:21,879 --> 00:05:25,559\nWe are gonna cover everything important throughout\nthis course, and we're gonna do it in an\n\n78\n00:05:25,599 --> 00:05:30,299\naction-oriented manner. Now, first, here's a plain\nEnglish summary of what this formula is\n\n79\n00:05:30,379 --> 00:05:34,859\nactually doing. First, this formula is gonna get\nthe value of the HEIGHT property.\n\n80\n00:05:34,979 --> 00:05:39,099\nNow, HEIGHT is a number type property, and in\nArticuno's case, the value is 17.\n\n81\n00:05:39,539 --> 00:05:44,139\nIt then divides this value by 10, returning a\nnumeric value of 1.7.\n\n82\n00:05:44,439 --> 00:05:49,139\nAnd I'll note that 10 is a hardcoded value in the\nformula, so it will always be 10\n\n83\n00:05:49,179 --> 00:05:54,039\nacross all rows in the database. By contrast, our\nPROP HEIGHT function\n\n84\n00:05:54,359 --> 00:05:56,979\nwill be whatever the height value of each row is.\n\n85\n00:05:57,479 --> 00:06:02,379\nThe FORMAT function then converts this numeric\nvalue into a string value, and strings are\n\n86\n00:06:02,379 --> 00:06:07,159\nessentially just pieces of text. Finally, the plus\nor addition operator is used to\n\n87\n00:06:07,299 --> 00:06:12,039\nconcatenate, i.e. combine, the string value with\nanother string, in this\n\n88\n00:06:12,099 --> 00:06:16,519\ncase, space and then M. And the final return value\nof this entire formula is\n\n89\n00:06:16,699 --> 00:06:21,439\n1.7 M, or meters. Now, let's see how each of the\nsix formula pieces I\n\n90\n00:06:21,439 --> 00:06:25,025\nmentioned above come into play here.First, the\nformat function.\n\n91\n00:06:25,225 --> 00:06:30,005\nThis is a function that accepts data of any type\nas its argument and converts that data to a\n\n92\n00:06:30,005 --> 00:06:30,465\nstring.\n\n93\n00:06:31,086 --> 00:06:35,885\nType conversion. Notion formulas can work with\nstrings, numbers, dates, and Boolean\n\n94\n00:06:35,945 --> 00:06:40,785\nvalues, or true or false values. However, they can\nonly return data of a single type.\n\n95\n00:06:41,046 --> 00:06:44,465\nTherefore, you'll often have to convert data types\nwhen writing your formulas.\n\n96\n00:06:45,245 --> 00:06:49,985\nProperty reference. Using the prop function, we\ncan bring in the value of any other property in\nthe\n\n97\n00:06:50,025 --> 00:06:50,885\nsame database.\n\n98\n00:06:51,565 --> 00:06:54,705\nDivision operator. This just divides a number by\nanother number.\n\n99\n00:06:55,646 --> 00:07:00,045\nYou can also use the divide function, but the\nslash character is just so much more convenient.\n\n100\n00:07:00,626 --> 00:07:05,105\nHard-coded number. Hard-coded is my term for data\nthat you write directly into a\n\n101\n00:07:05,205 --> 00:07:08,906\nformula. The opposite of hard-coded data would be\na property reference.\n\n102\n00:07:09,425 --> 00:07:10,445\nString concatenation.\n\n103\n00:07:11,225 --> 00:07:13,486\nThis basically means combining two strings\ntogether.\n\n104\n00:07:13,585 --> 00:07:18,445\nFor example, Monkey D as one string and Luffy as\nanother string would return\n\n105\n00:07:18,605 --> 00:07:21,125\nMonkey D. Luffy if you concatenated them together.\n\n106\n00:07:21,405 --> 00:07:26,285\nNow, you can also use the concat function for\nthis, but again, the plus operator is just so much\nmore easy to\n\n107\n00:07:26,325 --> 00:07:29,746\nuse, and it's much more flexible as well. All\nright, let's move on.\n\n108\n00:07:30,185 --> 00:07:32,345\nDon't worry if some of what we covered here feels\nconfusing.\n\n109\n00:07:32,465 --> 00:07:37,365\nThe entire point of this lesson is to, number one,\ngive you a quick win in order to motivate you to\n\n110\n00:07:37,386 --> 00:07:42,185\npush forward, but number two, give you some early\nexposure to several concepts that will be\n\n111\n00:07:42,225 --> 00:07:47,126\nimportant later on. Remember those video games\nthat gave your character, like, all their\nabilities and\n\n112\n00:07:47,166 --> 00:07:51,806\nweapons and gear in the first level, only to then\ntake it all away before you go onto the next one?\n\n113\n00:07:52,306 --> 00:07:53,945\nThis is a classic trick in game design.\n\n114\n00:07:53,945 --> 00:07:58,806\nIt gives you a taste of what's to come, and it\nalso makes each new ability and upgrade feel\nsomewhat\n\n115\n00:07:58,885 --> 00:08:01,385\nfamiliar when you finally unlock it later in the\ngame.\n\n116\n00:08:01,545 --> 00:08:05,185\nAnd that small amount of familiarity can help you\nto build mastery much faster.\n\n117\n00:08:05,545 --> 00:08:09,785\nSo, now that we've finished this initial\nchallenge, let's move on to the proper course\nintroduction.\n"
                    }
                ],
                "metadata": {
                    "model": "scribe_v1"
                }
            }
        ],
        "full_transcript": "Welcome to the Notion Formula Boot Camp. We are gonna kick things immediately into high gear and create two useful Notion formulas in this lesson, and every lesson in this course has both a written version and a video version, so you can pick whichever you like. This audio narration is provided to pace you through the written version, in case that's helpful to you, but you don't have to use it. Now, you're gonna find a more traditional course intro in the next section, but I wanted to start things out here with, uh, giving you a quick win. Now, quick wins are crucial to long-term successful learning, in my opinion. By getting your hands really dirty and experiencing quick wins, you'll gain motivation and confidence to keep pushing you deeper into the learning curve. So, let's get started. Here's a page from my Notion Pokedex, and this entry is for Articuno, which happens to be my favorite Pokemon. And it's mostly complete, but there's just one problem. What's up with these height and weight values, hmm? A height of 17? A weight of 554? Pretty sure a bird does not weigh that much. So what's going on here? Well, these height and weight values were pulled from PokeAPI, a resource that has data on every Pokemon in existence, and the data in PokeAPI is exactly the same as the data in the official Pokemon games. But for technical reasons, the Pokemon developers decided to store height values in decimeters and weight values in hectograms. And if you're US-based like me and you don't readily know what these terms mean, they're lesser-known units in the metric system. Deci means 1/10, while hecto means 100. So, a decimeter is 1/10 of a meter, and a hectogram is 100 grams or 1/10 of a kilogram. So, to make these values more readable, let's create two Notion formulas, one to convert decimeters to meters, and one to convert hectograms into kilograms. Let's go ahead and build the first one. Height, decimeters to meters. Now, I've created a template version of my Pokedex that you can access and duplicate into your own workspace. Click that link, duplicate the template into your workspace, and then navigate to the Articuno page. Next, create a new property with the formula property type and call it Height parentheses M parentheses. If you need a refresher on creating database properties, by the way, you can find one in my Notion database guide. In the formula editor, enter the following formula. And here's the formula in vocal form. FORMAT, parentheses, PROP, parentheses, HEIGHT, parentheses, divided by 10, parentheses, plus M. Like magic, you're gonna see this formula return Articuno's height in meters, 1.7 meters. Congrats, you've just written your first Notion formula. Your copy of the Pokedex template also contains an entry for Charmander, so go look at that really quick and you're gonna see that your formula is performing the correct calculation for Charmander as well. This is the beauty of the way that formulas and database properties interact. Across your database, the HEIGHTM property is written the same. However, because your formula pulls information from other properties, in this case, HEIGHT, the return value can be different for each database row. By the way, you've also just used six Notion formula principles, all in a single one-line formula, the FORMAT function, type conversion, a property reference, the division operator, a hardcoded number, and string concatenation. Now, don't worry if you don't know what any of these terms mean just yet. I'm gonna explain them all in a minute. And by the end of this course, you're gonna be very comfortable with all of them. For now, let's put your brain to work. I gave you the formula for height in meters. Now it's your turn to build a similar formula for weight in kilograms. Challenge, create a weight kilograms formula. Using what you've learned, create the formula for weight in kilograms. If you create it correctly, you should see a value of 55.4 kilograms for Articuno. Now challenge yourself to write this formula from scratch. I will give you two small hints to get started. First, the formula will be extremely similar to the one we just built for height in meters. And second, think about the unit conversion that we're trying to do. A hectogram is 100 grams, while a kilogram, our target unit, is 1,000 grams. Now, if you really need the answer, you can find it in the course answers page. But for the sake of your learning progress, I would urge you not to look at that answer until you've at least followed the 15-minute rule, which I have linked in this lesson. The best piece of advice I can give you for both completing this course and learning anything is to embrace the learning curve. View yourself as the kind of person who runs headfirst and bursts through the brick wall when it confronts you. Breaking down the formula. As I mentioned earlier, you just used six different formula principles while creating these two formulas. These principles, among others, will be crucial to your foundational understanding of Notion formulas. And fun fact, they will also help you learn to code better if you choose to do that someday down the road. They certainly helped me understand JavaScript a lot more quickly. Now let's break down our height in meters formula and go through each of these principles super quickly. For each, I'm gonna link to the relevant section in my Notion formula reference in case you wanna dig deeper. And you're gonna see me link to this formula reference a lot throughout this course. This is akin to the way that any JavaScript course worth its salt would at least tell you to go look at the MDN web docs. They are the definitive reference for the language. And these links are present for thoroughness, as I am a detail-oriented nerd, but if you are intimidated by them, feel free to skip them for now. We are gonna cover everything important throughout this course, and we're gonna do it in an action-oriented manner. Now, first, here's a plain English summary of what this formula is actually doing. First, this formula is gonna get the value of the HEIGHT property. Now, HEIGHT is a number type property, and in Articuno's case, the value is 17. It then divides this value by 10, returning a numeric value of 1.7. And I'll note that 10 is a hardcoded value in the formula, so it will always be 10 across all rows in the database. By contrast, our PROP HEIGHT function will be whatever the height value of each row is. The FORMAT function then converts this numeric value into a string value, and strings are essentially just pieces of text. Finally, the plus or addition operator is used to concatenate, i.e. combine, the string value with another string, in this case, space and then M. And the final return value of this entire formula is 1.7 M, or meters. Now, let's see how each of the six formula pieces I mentioned above come into play here.First, the format function. This is a function that accepts data of any type as its argument and converts that data to a string. Type conversion. Notion formulas can work with strings, numbers, dates, and Boolean values, or true or false values. However, they can only return data of a single type. Therefore, you'll often have to convert data types when writing your formulas. Property reference. Using the prop function, we can bring in the value of any other property in the same database. Division operator. This just divides a number by another number. You can also use the divide function, but the slash character is just so much more convenient. Hard-coded number. Hard-coded is my term for data that you write directly into a formula. The opposite of hard-coded data would be a property reference. String concatenation. This basically means combining two strings together. For example, Monkey D as one string and Luffy as another string would return Monkey D. Luffy if you concatenated them together. Now, you can also use the concat function for this, but again, the plus operator is just so much more easy to use, and it's much more flexible as well. All right, let's move on. Don't worry if some of what we covered here feels confusing. The entire point of this lesson is to, number one, give you a quick win in order to motivate you to push forward, but number two, give you some early exposure to several concepts that will be important later on. Remember those video games that gave your character, like, all their abilities and weapons and gear in the first level, only to then take it all away before you go onto the next one? This is a classic trick in game design. It gives you a taste of what's to come, and it also makes each new ability and upgrade feel somewhat familiar when you finally unlock it later in the game. And that small amount of familiarity can help you to build mastery much faster. So, now that we've finished this initial challenge, let's move on to the proper course introduction.",
        "performance_metrics": {
            "setup": 1.295051,
            "download": 22.918095,
            "transcription": 24510.50229,
            "transcriptCombination": 0.336737,
            "translation": 0,
            "summary": 0,
            "total": 24535.052173
        },
        "performance_formatted": {
            "setup": "1.30ms",
            "download": "22.92ms",
            "transcription": "24.51 seconds",
            "transcriptCombination": "0.34ms",
            "translation": "0.00ms",
            "summary": "0.00ms",
            "total": "24.54 seconds"
        }
    }
}